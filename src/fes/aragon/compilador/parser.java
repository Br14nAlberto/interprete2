
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 25 04:54:27 CDT 2022
//----------------------------------------------------

package fes.aragon.compilador;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed May 25 04:54:27 CDT 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\003\010\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\006\000\002\003\010\000\002\003\006\000\002" +
    "\003\003\000\002\005\004\000\002\005\003\000\002\007" +
    "\004\000\002\007\003\000\002\006\010\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\006\000\002\006\006\000\002\010\010\000\002" +
    "\010\004\000\002\010\004\000\002\010\004\000\002\010" +
    "\004\000\002\010\006\000\002\010\010\000\002\004\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\026\003\012\004\014\005\015\006\005\007" +
    "\004\010\010\011\013\014\016\015\006\020\011\001\002" +
    "\000\004\017\130\001\002\000\004\017\127\001\002\000" +
    "\004\012\124\001\002\000\026\002\122\004\014\005\015" +
    "\006\005\007\004\010\010\011\013\014\016\015\006\020" +
    "\011\001\002\000\004\017\121\001\002\000\026\002\ufff5" +
    "\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\014" +
    "\ufff5\015\ufff5\020\ufff5\001\002\000\026\002\ufffe\004\ufffe" +
    "\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\014\ufffe\015" +
    "\ufffe\020\ufffe\001\002\000\004\017\120\001\002\000\004" +
    "\016\113\001\002\000\004\016\110\001\002\000\004\016" +
    "\020\001\002\000\026\002\uffff\004\uffff\005\uffff\006\uffff" +
    "\007\uffff\010\uffff\011\uffff\014\uffff\015\uffff\020\uffff\001" +
    "\002\000\004\020\021\001\002\000\010\012\uffe2\016\uffe2" +
    "\017\uffe2\001\002\000\004\012\023\001\002\000\020\004" +
    "\033\005\034\006\025\007\024\010\030\011\032\015\027" +
    "\001\002\000\004\017\107\001\002\000\004\017\106\001" +
    "\002\000\022\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\013\ufff3\015\ufff3\001\002\000\004\012\051\001" +
    "\002\000\004\017\050\001\002\000\022\004\033\005\034" +
    "\006\025\007\024\010\030\011\032\013\047\015\027\001" +
    "\002\000\004\017\045\001\002\000\004\016\040\001\002" +
    "\000\004\016\035\001\002\000\004\020\021\001\002\000" +
    "\004\017\037\001\002\000\022\004\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\013\uffeb\015\uffeb\001\002\000" +
    "\004\020\021\001\002\000\004\016\042\001\002\000\004" +
    "\020\021\001\002\000\004\017\044\001\002\000\022\004" +
    "\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\013\ufff0" +
    "\015\ufff0\001\002\000\022\004\uffec\005\uffec\006\uffec\007" +
    "\uffec\010\uffec\011\uffec\013\uffec\015\uffec\001\002\000\022" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\013" +
    "\ufff4\015\ufff4\001\002\000\026\002\ufff7\004\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\014\ufff7\015\ufff7\020" +
    "\ufff7\001\002\000\022\004\uffed\005\uffed\006\uffed\007\uffed" +
    "\010\uffed\011\uffed\013\uffed\015\uffed\001\002\000\020\004" +
    "\060\005\061\006\055\007\052\010\056\011\057\014\062" +
    "\001\002\000\004\017\105\001\002\000\022\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\013\ufff1\014\ufff1" +
    "\001\002\000\022\004\060\005\061\006\055\007\052\010" +
    "\056\011\057\013\104\014\062\001\002\000\004\017\102" +
    "\001\002\000\004\017\101\001\002\000\004\017\100\001" +
    "\002\000\004\016\073\001\002\000\004\016\070\001\002" +
    "\000\004\016\063\001\002\000\004\020\021\001\002\000" +
    "\004\012\065\001\002\000\020\004\033\005\034\006\025" +
    "\007\024\010\030\011\032\015\027\001\002\000\022\004" +
    "\033\005\034\006\025\007\024\010\030\011\032\013\067" +
    "\015\027\001\002\000\022\004\uffe3\005\uffe3\006\uffe3\007" +
    "\uffe3\010\uffe3\011\uffe3\013\uffe3\014\uffe3\001\002\000\004" +
    "\020\021\001\002\000\004\017\072\001\002\000\022\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\013\uffe4" +
    "\014\uffe4\001\002\000\004\020\021\001\002\000\004\016" +
    "\075\001\002\000\004\020\021\001\002\000\004\017\077" +
    "\001\002\000\022\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010" +
    "\uffe9\011\uffe9\013\uffe9\014\uffe9\001\002\000\022\004\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\013\uffe5\014" +
    "\uffe5\001\002\000\022\004\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\013\uffe6\014\uffe6\001\002\000\022\004" +
    "\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\013\uffe8" +
    "\014\uffe8\001\002\000\022\004\ufff2\005\ufff2\006\ufff2\007" +
    "\ufff2\010\ufff2\011\ufff2\013\ufff2\014\ufff2\001\002\000\022" +
    "\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\013" +
    "\uffea\015\uffea\001\002\000\022\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\013\uffe7\014\uffe7\001\002\000" +
    "\022\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef" +
    "\013\uffef\015\uffef\001\002\000\022\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\010\uffee\011\uffee\013\uffee\015\uffee\001\002" +
    "\000\004\020\021\001\002\000\004\017\112\001\002\000" +
    "\026\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\014\ufff8\015\ufff8\020\ufff8\001\002\000\004\020" +
    "\021\001\002\000\004\016\115\001\002\000\004\020\021" +
    "\001\002\000\004\017\117\001\002\000\026\002\ufffd\004" +
    "\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\014\ufffd" +
    "\015\ufffd\020\ufffd\001\002\000\026\002\ufff9\004\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\014\ufff9\015\ufff9" +
    "\020\ufff9\001\002\000\026\002\ufffa\004\ufffa\005\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\014\ufffa\015\ufffa\020\ufffa" +
    "\001\002\000\004\002\000\001\002\000\026\002\001\004" +
    "\001\005\001\006\001\007\001\010\001\011\001\014\001" +
    "\015\001\020\001\001\002\000\020\004\060\005\061\006" +
    "\055\007\052\010\056\011\057\014\062\001\002\000\022" +
    "\004\060\005\061\006\055\007\052\010\056\011\057\013" +
    "\126\014\062\001\002\000\026\002\ufff6\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\014\ufff6\015\ufff6\020" +
    "\ufff6\001\002\000\026\002\ufffc\004\ufffc\005\ufffc\006\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\014\ufffc\015\ufffc\020\ufffc\001" +
    "\002\000\026\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb" +
    "\010\ufffb\011\ufffb\014\ufffb\015\ufffb\020\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\006\002\006\003\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\030" +
    "\006\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\040\001\001\000\002\001" +
    "\001\000\004\004\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\053\010\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\063\001\001\000\002\001\001\000\006\005\065" +
    "\006\025\001\001\000\004\006\045\001\001\000\002\001" +
    "\001\000\004\004\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\073\001\001\000\002\001\001\000" +
    "\004\004\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\113\001\001" +
    "\000\002\001\001\000\004\004\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\124\010" +
    "\052\001\001\000\004\010\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static Lexico lex;
	public void syntax_error(Symbol st){
		System.out.println("Error en la linea "+ lex.getYyline() +
                    " columna: "+ lex.getYy_currentPos());
	}
	public void cargar(String archivo) throws Exception{	
		lex=new Lexico(new FileInputStream(new File(archivo)));
		new parser(lex).parse();
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	public Archivo archivoSalida = 
	new Archivo(new File(System.getProperty("user.dir")+"/salida.fes"));
	private ArrayList<String> repite = new ArrayList<String>();
	private ArrayList<String> ver = new ArrayList<String>();
	private ArrayList<String> aux = new ArrayList<String>();
	
	public void almacenar(String datos,boolean valor){
		archivoSalida.escribir(datos,valor);
	}
	
	public void guardarRepetir(ArrayList<String> l1, int numR){
		for (int k = 0; k < numR; k++) {
			for (int i = 0; i < l1.size(); i++) {
				almacenar(l1.get(i), true);
			}
		}	
	}
	
	public void guardarRepetir2(ArrayList<String> l1, int numR){
		for (int k = 0; k < numR; k++) {
			for (int i = 0; i < l1.size(); i++) {
				aux.add(l1.get(i));
			}
		}	
	}
	
	public void guardarVer(ArrayList<String> l1){
		for (int i = 0; i < l1.size(); i++) {
			almacenar(l1.get(i), true);
		}
	}
	
	public void imprimirValor(String str){
		System.out.println("Valor del token es: "+str);
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // entero ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entero",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ins4 ::= REPETIR ESPACIO entero LLLAVE ins RLLAVE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
       		guardarRepetir2(repite, (int) e1);
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins4",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ins4 ::= MOVER ESPACIO entero PUNTOYCOMA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ver.add("mover " + String.valueOf(e1)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins4",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ins4 ::= DERECHA PUNTOYCOMA 
            {
              Object RESULT =null;
		 ver.add("derecha"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins4",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ins4 ::= IZQUIERDA PUNTOYCOMA 
            {
              Object RESULT =null;
		 ver.add("izquierda"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins4",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ins4 ::= ABAJO PUNTOYCOMA 
            {
              Object RESULT =null;
		 ver.add("abajo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins4",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ins4 ::= ARRIBA PUNTOYCOMA 
            {
              Object RESULT =null;
		 ver.add("arriba"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins4",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ins4 ::= COLOCA ESPACIO entero ESPACIO entero PUNTOYCOMA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ver.add("coloca " + String.valueOf(e1) + " " + String.valueOf(e2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins4",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ins2 ::= VFRUTA LLLAVE ins3 RLLAVE 
            {
              Object RESULT =null;
		
      		ver.add(0,"ver");
      		repite.addAll(ver);
      		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ins2 ::= MOVER ESPACIO entero PUNTOYCOMA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 repite.add("mover " + String.valueOf(e1)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ins2 ::= DERECHA PUNTOYCOMA 
            {
              Object RESULT =null;
		 repite.add("derecha"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ins2 ::= IZQUIERDA PUNTOYCOMA 
            {
              Object RESULT =null;
		 repite.add("izquierda"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ins2 ::= ABAJO PUNTOYCOMA 
            {
              Object RESULT =null;
		 repite.add("abajo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ins2 ::= ARRIBA PUNTOYCOMA 
            {
              Object RESULT =null;
		 repite.add("arriba"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ins2 ::= COLOCA ESPACIO entero ESPACIO entero PUNTOYCOMA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 repite.add("coloca " + String.valueOf(e1) + " " + String.valueOf(e2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ins3 ::= ins4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins3",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ins3 ::= ins3 ins4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins3",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ins ::= ins2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ins ::= ins ins2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E ::= VFRUTA LLLAVE ins3 RLLAVE 
            {
              Object RESULT =null;
		 
      	ver.add(0,"ver");
      	ver.addAll(aux);
      	guardarVer(ver);
      	ver.clear();
      	repite.clear();
      	aux.clear();
      	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E ::= REPETIR ESPACIO entero LLLAVE ins RLLAVE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
       		guardarRepetir(repite, (int) e1);
       		repite.clear();
       		ver.clear();
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E ::= MOVER ESPACIO entero PUNTOYCOMA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 almacenar("mover " + String.valueOf(e1),true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E ::= DERECHA PUNTOYCOMA 
            {
              Object RESULT =null;
		 almacenar("derecha", true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E ::= IZQUIERDA PUNTOYCOMA 
            {
              Object RESULT =null;
		 almacenar("izquierda", true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // E ::= ABAJO PUNTOYCOMA 
            {
              Object RESULT =null;
		 almacenar("abajo", true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // E ::= ARRIBA PUNTOYCOMA 
            {
              Object RESULT =null;
		 almacenar("arriba", true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // E ::= COLOCA ESPACIO entero ESPACIO entero PUNTOYCOMA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 almacenar("coloca " + String.valueOf(e1) + " " + String.valueOf(e2), true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= error 
            {
              Object RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= S E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

